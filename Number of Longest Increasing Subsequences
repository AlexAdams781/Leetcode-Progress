# https://leetcode.com/problems/number-of-longest-increasing-subsequence/description/
'''
This is the most challenging "Medium" DP problem.  You need two DP arrays to keep track of
length of LIS starting at i and # of LIS in nums[i:].
'''

class Solution:
    def findNumberOfLIS(self, nums: List[int]) -> int:
        L = len(nums)
        DP = [1] * L
        cnt = [1] * L
        m = 1

        for i in range(1, L):
            for j in range(i):
                if nums[i] > nums[j]:
                    if DP[i] < DP[j] + 1:
                        DP[i] = DP[j]+1
                        cnt[i] = cnt[j]
                    elif DP[i] == DP[j] + 1:
                        cnt[i] += cnt[j]
                m = max(m, DP[i])
                
        res = 0
        for i in range(L):
            if DP[i] == m:
                res += cnt[i]

        return res
